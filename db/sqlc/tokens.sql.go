// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: tokens.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/guregu/null"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
    token, user_id, expires_at
) VALUES (
             $1, $2, $3
         ) RETURNING id, token, user_id, created_at, expires_at
`

type CreateTokenParams struct {
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt null.Time `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const deleteUsersTokens = `-- name: DeleteUsersTokens :exec
DELETE FROM tokens
WHERE user_id = $1
`

func (q *Queries) DeleteUsersTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUsersTokens, userID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, token, user_id, created_at, expires_at FROM tokens
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, token string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, token)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
